knitr::opts_chunk$set(echo = TRUE)
##library(tidyverse) - will load the core tidyverse packages
## can be loaded seperate
#Similarly to readr , dplyr and tidyr are also part of the tidyverse. These packages were loaded in R's memory when we called library(tidyverse)
library(readr)
#for data import
library(ggplot2)
#for data visualisation
library(dplyr)
#for data manipulation
library(tidyr)
#for data tidying
library(tibble)
#for tibbles, a modern re-imagining of data frames
knitr::opts_chunk$set(echo = TRUE)
##library(tidyverse) - will load the core tidyverse packages
## can be loaded separate (corrected typo here)
#Similarly to readr , dplyr and tidyr are also part of the tidyverse. These packages were loaded in R's memory when we called library(tidyverse)
library(readr)
#for data import
library(ggplot2)
#for data visualization (corrected typo here)
library(dplyr)
#for data manipulation
library(tidyr)
#for data tidying
library(tibble)
#for tibbles, a modern re-imagining of data frames
#use read_csv function from readr to import csv file
diamond_data <- read_csv("https://raw.githubusercontent.com/johnm1990/DATA607/master/diamonds.csv")
#as_tibble() turns an existing object, such as a data frame or matrix, into a so-called tibble, a data frame with class tbl_df .
diamond_data <- as_tibble(diamond_data)
head(diamond_data)
#
slice(diamond_data, 1:8)
#select the first or last rows.
slice_head(diamond_data)
slice_tail(diamond_data)
#randomly selects rows
slice_sample(diamond_data)
diamond_data %>% select(price, depth) %>% mutate(Ratio = price/depth)
diamond_data <- select(diamond_data, -X1, -z, -color, -cut, -carat, -price)
diamond_data
# Basic barplot
ggplot(diamond_data) +
geom_point(aes(clarity, depth))
knitr::opts_chunk$set(echo = TRUE)
foul<-read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/foul-balls/foul-balls.csv", na.strings=c("NA", "NULL"))
head(foul)
names(foul)<-c("Matchup","Game_Date", "Type_of_Hit","Exit_Velocity", "Predicted_Zone", "Camera_Zone", "Used_Zone")
colnames(foul)
foul %>%
filter(Predicted_Zone=="7"|Predicted_Zone=="6")
foul %>%
arrange(desc(Exit_Velocity))%>%
head(20)
foul_info<-na.omit(foul)
foul_sum <- group_by(foul_info, Type_of_Hit)
foul_sum <- summarise(foul_sum,Min=min(Exit_Velocity),Max = max(Exit_Velocity),Median=median(Exit_Velocity), Mean=round(mean(Exit_Velocity),1))
foul_sum<-as.data.frame(foul_sum)
foul_sum
View(diamond_data)
View(diamond_data)
diamond_data <- select(diamond_data, -X1, -z, -color, -cut, -carat, -price)
#diamond_data <- select(diamond_data, -X1, -z, -color, -cut, -carat, -price)
diamond_data %>%
count(clarity, sort = TRUE)
#diamond_data <- select(diamond_data, -X1, -z, -color, -cut, -carat, -price)
diamond_data %>%
count(clarity, cut,sort = TRUE)
#diamond_data <- select(diamond_data, -X1, -z, -color, -cut, -carat, -price)
diamond_data %>%
count(clarity, cut, sort = TRUE)
#diamond_data <- select(diamond_data, -X1, -z, -color, -cut, -carat, -price)
diamond_data %>%
count(clarity, sort = TRUE)
diamond_data <- select(diamond_data, -X1, -z, -color, -cut, -carat, -price)
diamond_data <- select(diamond_data, -x1, -z, -color, -cut, -carat, -price)
knitr::opts_chunk$set(echo = TRUE)
##library(tidyverse) - will load the core tidyverse packages
## can be loaded separate (corrected typo here)
#Similarly to readr , dplyr and tidyr are also part of the tidyverse. These packages were loaded in R's memory when we called library(tidyverse)
library(readr)
#for data import
library(ggplot2)
#for data visualization (corrected typo here)
library(dplyr)
#for data manipulation
library(tidyr)
#for data tidying
library(tibble)
#for tibbles, a modern re-imagining of data frames
#use read_csv function from readr to import csv file
diamond_data <- read_csv("https://raw.githubusercontent.com/johnm1990/DATA607/master/diamonds.csv")
#as_tibble() turns an existing object, such as a data frame or matrix, into a so-called tibble, a data frame with class tbl_df .
diamond_data <- as_tibble(diamond_data)
head(diamond_data)
#
slice(diamond_data, 1:8)
#select the first or last rows.
slice_head(diamond_data)
slice_tail(diamond_data)
#randomly selects rows
slice_sample(diamond_data)
diamond_data %>% select(price, depth) %>% mutate(Ratio = price/depth)
diamond_data <- select(diamond_data, -X1, -z, -color, -cut, -carat, -price)
diamond_data
diamond_data <- select(clarity, color, cut, carat)
diamond_data <- select(diamond_data, color, cut, carat)
#diamond_data <- select(diamond_data, -X1, -z, -color, -cut, -carat, -price)
#diamond_data
diamond_data %>%
select(diamonds)%>%
head(20)
#diamond_data <- select(diamond_data, -X1, -z, -color, -cut, -carat, -price)
#diamond_data
diamond_data %>%
select(diamonds)%>%
head(20)
#diamond_data <- select(diamond_data, -X1, -z, -color, -cut, -carat, -price)
#diamond_data
diamond_data %>%
count(clarity, sort = TRUE)
diamond_data2 <- select(clarity, color, cut, carat)
diamond_data2 <- select(diamond_data,clarity, color, cut, carat)
diamond_data <- select(diamond_data, -X1, -price)
diamond_data2 <- select(diamond_data, -X1, -x, -y, -z, -price)
diamond_data2 <- select(diamond_data, -X1, -x, -y, -z, -price)
diamond_data2 <- select(diamond_data, -X1, -x, -y, -z, -price)
diamond_data <- select(diamond_data, -X1, -x, -y, -z, -price)
diamond_data2 <- select(diamond_data, -x, -y, -z, -price)
diamond_data2%>%
select(diamond_data, -X1, -x, -y, -z, -price)%>%
#diamond_data %>%
#  count(clarity, sort = TRUE)
diamond_data2%>%
select(diamond_data, -X1, -x, -y, -z, -price)%>%
diamond_data2
diamond_data2%>%
select(diamond_data, -X1, -x, -y, -z, -price)%>%
#diamond_data %>%
#  count(clarity, sort = TRUE)
diamond_data2%>%
select(diamond_data, -X1, -x, -y, -z, -price)
diamond_data%>%
select(carat, cut, color, clarity)
diamond_data%>%
select(carat, cut, color, clarity)
select(diamond_data,carat, cut, color, clarity)
#use read_csv function from readr to import csv file
diamond_data <- read_csv("https://raw.githubusercontent.com/johnm1990/DATA607/master/diamonds.csv")
#as_tibble() turns an existing object, such as a data frame or matrix, into a so-called tibble, a data frame with class tbl_df .
diamond_data <- as_tibble(diamond_data)
head(diamond_data)
#
slice(diamond_data, 1:8)
#select the first or last rows.
slice_head(diamond_data)
slice_tail(diamond_data)
#randomly selects rows
slice_sample(diamond_data)
diamond_data %>% select(price, depth) %>% mutate(Ratio = price/depth)
select(diamond_data,carat, cut, color, clarity)
#diamond_data %>%
#  count(clarity, sort = TRUE)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
count(cut, sort = TRUE)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
count(clarity, sort = TRUE)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
desc(carat, sort = TRUE)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
desc(carat)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
desc(carat, sort = TRUE)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
count(carat, sort = TRUE)
select(diamond_data,carat, cut, color, clarity)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
count(clarity, sort = TRUE)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
arrange(desc(carat))%>%
head(20)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
arrange(desc(cut))%>%
head(20)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
filter(color=="Ideal")%>%
head(20)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
filter(cut=="Ideal")%>%
head(20)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
filter(cut=="Ideal")%>%
desc(price)%>%
head(20)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
filter(cut=="Ideal")%>%
arrange(desc(price))%>%
head(20)
select(diamond_data,carat, cut, color, clarity)
diamond_data %>%
#filter(cut=="Ideal")%>%
arrange(desc(price))%>%
head(20)
# Basic barplot
#ggplot(diamond_data) +
geom_point(aes(clarity, depth))
ggplot(diamond_data, aes(x=clarity, y=cut, color=color)) + geom_point()
# Basic barplot
#ggplot(diamond_data) +
geom_point(aes(clarity, depth))
ggplot(diamond_data, aes(x=clarity, y=cut, color=color)) + geom_boxplot()
# Basic barplot
#ggplot(diamond_data) +
geom_point(aes(clarity, depth))
ggplot(diamond_data, aes(x=clarity, y=cut, color=color)) + geom_bar()
# Basic barplot
#ggplot(diamond_data) +
geom_point(aes(clarity, depth))
ggplot(diamond_data, aes(x=clarity, y=cut, color=color)) + geom_point()
# Basic barplot
#ggplot(diamond_data) +
geom_point(aes(clarity, depth))
ggplot(diamond_data, aes(x=clarity, y=price, color=color)) + geom_point()
# Basic barplot
#ggplot(diamond_data) +
geom_point(aes(clarity, depth))
ggplot(diamond_data, aes(x=clarity, y=price, color=color)) + geom_histogram()
# Basic barplot
#ggplot(diamond_data) +
geom_point(aes(clarity, depth))
ggplot(diamond_data, aes(x=carat, y=price, color=clarity)) + geom_point()
# Basic barplot
#ggplot(diamond_data) +
#geom_point(aes(clarity, depth))
ggplot(diamond_data, aes(x=carat, y=price, color=clarity, shape=cut)) + geom_point()
# Basic barplot
ggplot(diamond_data) +
geom_point(aes(clarity, depth))
ggplot(diamond_data, aes(x=carat, y=price, color=clarity, shape=cut)) + geom_point()
